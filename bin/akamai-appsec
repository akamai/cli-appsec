#!/usr/bin/env node

"use strict";

var AppSecConfig = require("../src/config").AppSecConfig;
var CRB = require("../src/crb").CRBHandler;
var fs = require("fs");

function print(object, options, customPrinter) {
  if (options.json == true) {
    console.log(JSON.stringify(object));
  } else {
    console.log(customPrinter(options, object));
  }
}

require("sywac")
  .command("structured-rule-template", {
    desc: "Prints sample JSON of a structured custom rule.",
    aliases: ["srt"],
    run: options => {
      console.log(new CRB().template());
    }
  })
  .command("configs", {
    desc: "List configurations",
    setup: sywac => {
      sywac.boolean("--json", {
        desc: "Print the raw json response",
        group: "Options:"
      });
    },
    run: options => {
      new AppSecConfig().configs(options).then(res => {
        console.log(res);
      }).catch(err => {
        console.error(err);
        process.exit(1);
      });
    }
  })
  .command("custom-rule", {
    desc: "Display contents of custom rule",
    setup: sywac => {
      sywac.number("--config <id>", {
          desc: "Configuration id. Mandatory if you have more than one configuration.",
          group: "Options:",
          required: false
        })
        .number("--ruleid <id>", {
          desc: "Rule ID.",
          group: "Options:",
          required: true
        });
    },
    run: options => {
      new CRB().getRule(options.config, options.ruleid).then(data => {
        console.log(data);
      }).catch(err => {
        console.error(err);
        process.exit(1);
      });
    }
  })
  .command("custom-rules", {
    desc: "List all custom rules",
    setup: sywac => {
      sywac.number("--config <id>", {
        desc: "Configuration id. Mandatory if you have more than one configuration.",
        group: "Options:",
        required: false
      });
    },
    run: options => {
      new CRB().getAllRules(options.config).then(data => {
        console.log(data);
      }).catch(err => {
        console.error(err);
        process.exit(1);
      });
    }
  })
  .command("versions", {
    desc: "List all versions",
    setup: sywac => {
      sywac.number("--config <id>", {
        desc: "Configuration id. Mandatory if you have more than one configuration.",
        group: "Options:",
        required: false
      });
    },
    run: options => {
      new AppSecConfig().versions(options).then(data => {
        print(data, options, (options, versions) => {
          let vids = [];
          for (let i = 0; i < versions.versionList.length; i++) {
            vids.push(versions.versionList[i].version);
          }
          return vids.join("\n");
        });
      }).catch(err => {
        console.error(err);
        process.exit(1);
      });
    }
  })
  .command("version", {
    desc: "Read a config version",
    setup: sywac => {
      sywac.number("--config <id>", {
        desc: "Configuration id number",
        group: "Options:",
        required: false
      }).string("--version <id>", {
        desc: "The version id number. It can also take the values 'PROD' or 'PRODUCTION' or 'STAGING'. If not provided, latest version is assumed.",
        group: "Options:",
        required: false
      });
    },
    run: options => {
      new AppSecConfig().version(options).then(data => {
        console.log(data);
      }).catch(err => {
        console.error(err);
        process.exit(1);
      });
    }
  })
  .showHelpByDefault()
  .help("--help", {
    group: "Command options:",
    desc: "Prints help information."
  })
  .version("--v", {
    group: "Command options:",
    desc: "Current version og the program."
  })
  .epilogue("Copyright (C) Akamai Technologies, Inc\nVisit http://github.com/akamai/cli-property for detailed documentation\n")
  .outputSettings({
    maxWidth: 75
  })
  .parse()
  .then(result => {
    if (result.errors.length) {
      console.error("ERROR: ", result.errors[0] || JSON.stringify(result.errors[0]));
      console.output = "";
    }
    // if help requested, log it and exit
    if (result.output) {
      console.log(result.output);
      process.exit(result.code);
    }
  });