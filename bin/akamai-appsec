#!/usr/bin/env node

"use strict";

var AppSecConfig = require("../src/appSecConfig").AppSecConfig;
var CRB = require("../src/crb").CRBHandler;
var SelectedHosts = require("../src/hosts").selectedHosts;

function print(object, options, customPrinter) {
  if (options.json) {
    console.log(JSON.stringify(object));
  } else {
    console.log(customPrinter(options, object));
  }
}

function errorOut(errJson, options, customPrinter=(opt,err)=>{
  return err.detail ? err.detail:err.title;
}) {
  if(options.json) {
    console.error(JSON.stringify(errJson));
  } else {
    console.error(customPrinter(options, errJson));
  }
  process.exit(1);
}

function handle(handlerOptions) {
  handlerOptions.promise.then(res=>{
    print(res, handlerOptions.args, handlerOptions.success);
  }).catch(err=>{
    errorOut(err, handlerOptions.args, handlerOptions.error);
  });
}

require("sywac")
  .command("structured-rule-template", {
    desc: "Prints sample JSON of a structured custom rule.",
    aliases: ["srt"],
    run: options => {
      console.log(new CRB().template());
    }
  })
  .command("configs", {
    desc: "List configurations",
    setup: sywac => {
      sywac.boolean("--json", {
        desc: "Print the raw json response",
        group: "Options:"
      });
    },
    run: options => {
      handle({
        promise: new AppSecConfig().configs(options),
        args:options,
        success:(args, data)=>{
          let str = [];
          for(let i=0;data&&i<data.length;i++) {
            str.push(data[i].configId);
          }
          return str.join('\n');
        }
      });
    }
  })
  .command("custom-rules", {
    desc: "List all custom rules",
    setup: sywac => {
      sywac.number("--config <id>", {
        desc: "Configuration id. Mandatory if you have more than one configuration.",
        group: "Options:",
        required: false
      });
    },
    run: options => {
      handle({
        promise: new CRB().getAllRules(options),
        args:options,
        success:(args, data)=>{
          let str = [];
          for(let i=0;data&&i<data.length;i++) {
            str.push(data[i].ruleId);
          }
          return str.join('\n');
        }
      });
    }
  })
  .command("custom-rule", {
        desc: "Display contents of custom rule",
        setup: sywac => {
          sywac.number("--config <id>", {
            desc: "Configuration id. Mandatory if you have more than one configuration.",
            group: "Options:",
            required: false
          })
          .number("--ruleId <id>", {
              desc: "Rule ID.",
              group: "Options:",
              required: true
          });
        },
        run: options => {
          handle({
            promise: new CRB().getRule(options),
            args:options,
            success:(args, data)=>{
              return data;
            }
          });
        }
      })
    .command("create-custom-rule", {
        desc: "Create custom rule",
        setup: sywac => {
            sywac.number("--config <id>", {
                desc: "Configuration id. Mandatory if you have more than one configuration.",
                group: "Options:",
                required: false
            })

            .file('--file <path>', {
                desc: 'File with JSON rules',
                group: "Options:",
                required: true,
                mustExist: true
            });
        },
        run: options => {
          handle({
            promise: new CRB().createRule(options),
            args:options,
            success:(args, data)=>{
              return data;
            }
          });
        }
    })
    .command("modify-custom-rule", {
        desc: "Update existing custom rule",
        setup: sywac => {
            sywac.number("--config <id>", {
                desc: "Configuration id. Mandatory if you have more than one configuration.",
                group: "Options:",
                required: false
            })
            .number("--ruleId <id>", {
                desc: "Rule ID.",
                group: "Options:",
                required: true
            })
            .file('--file <path>', {
                desc: 'File with JSON rules',
                mustExist: true
            });
        },
        run: options => {
          handle({
            promise: new CRB().updateRule(options),
            args:options,
            success:(args, data)=>{
              return data;
            }
          });
        }
    })

  .command("config-versions", {
    desc: "List all versions",
    setup: sywac => {
      sywac.number("--config <id>", {
        desc: "Configuration id. Mandatory if you have more than one configuration.",
        group: "Options:",
        required: false
      });
    },
    run: options => {
      handle({
        promise: new AppSecConfig().versions(options),
        args:options,
        success:(args, data)=>{
          let vids = [];
          for (let i = 0; i < data.versionList.length; i++) {
            vids.push(data.versionList[i].version);
          }
          return vids.join("\n");
        }
      });
    }
  })
  .command("config-version", {
    desc: "Read a config version",
    setup: sywac => {
      sywac.number("--config <id>", {
        desc: "Configuration id number",
        group: "Options:",
        required: false
      }).string("--version <id>", {
        desc: "The version id number. It can also take the values 'PROD' or 'PRODUCTION' or 'STAGING'. If not provided, latest version is assumed.",
        group: "Options:",
        required: false
      });
    },
    run: options => {
      handle({
        promise: new AppSecConfig().version(options),
        args:options,
        success:(args, data)=>{
          return data.version;
        }
      });
    }
  })
  .command("add-hostname", {
    desc: "Add hostnames to selected list",
    setup: sywac => {
        sywac.number("--config <id>", {
            desc: "Configuration id. Mandatory if you have more than one configuration.",
            group: "Options:",
            required: false
        }).number("--version <id>", {
          desc: "Version id.",
          group: "Options:",
          required: false
       }).stringArray('--hosts <a.com, b.net, c.d.com>',{
          desc: "Hostnames to add to the selected list.",
          group: "Options:",
          required: true
      });
    },
    run: options => {
      handle({
        promise: new SelectedHosts().addHosts(options),
        args:options,
        success:(args, data)=>{
          let hosts = [];
            for (let i = 0; i < data.hostnameList.length; i++) {
              hosts.push(data.hostnameList[i].hostName);
            }
            return hosts.join("\n");
        }
      });
    }
}).command("selectable-hostnames", {
  desc: "List all selectable host names",
  setup: sywac => {
      sywac.number("--config <id>", {
          desc: "Configuration id. Mandatory if you have more than one configuration.",
          group: "Options:",
          required: false
      }).number("--version <id>", {
        desc: "Version id.",
        group: "Options:",
        required: false
     });
  },
  run: options => {
    handle({
      promise: new SelectedHosts().selectableHosts(options),
      args:options,
      success:(args, data)=>{
        let hosts = [];
        for (let i = 0; i < data.availableSet.length; i++) {
          hosts.push(data.availableSet[i].hostName);
        }
        return hosts.join("\n");
      }
    });
  }
})
  .showHelpByDefault()
  .help("--help", {
    group: "Command options:",
    desc: "Prints help information."
  })
  .version("--ver", {
    group: "Command options:",
    desc: "Current version of the program."
  })
  .epilogue("Copyright (C) Akamai Technologies, Inc\nVisit http://github.com/akamai/cli-appsec for detailed documentation\n")
  .outputSettings({
    maxWidth: 75
  })
  .parse()
  .then(result => {
    if (result.errors.length) {
      console.error("ERROR: ", result.errors[0] || JSON.stringify(result.errors[0]));
      console.output = "";
    }
    // if help requested, log it and exit
    if (result.output) {
      console.log(result.output);
      process.exit(result.code);
    }
  });
